var documenterSearchIndex = {"docs":
[{"location":"91-developer/#dev_docs","page":"Developer documentation","title":"Developer documentation","text":"","category":"section"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"note: Contributing guidelines\nIf you haven't, please read the Contributing guidelines first.","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"If you want to make contributions to this package that involves code, then this guide is for you.","category":"page"},{"location":"91-developer/#First-time-clone","page":"Developer documentation","title":"First time clone","text":"","category":"section"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"tip: If you have writing rights\nIf you have writing rights, you don't have to fork. Instead, simply clone and skip ahead. Whenever upstream is mentioned, use origin instead.","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"If this is the first time you work with this repository, follow the instructions below to clone the repository.","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"Fork this repo\nClone your repo (this will create a git remote called origin)\nAdd this repo as a remote:\ngit remote add upstream https://github.com/appleparan/SPlit.jl","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"This will ensure that you have two remotes in your git: origin and upstream. You will create branches and push to origin, and you will fetch and update your local main branch from upstream.","category":"page"},{"location":"91-developer/#Linting-and-formatting","page":"Developer documentation","title":"Linting and formatting","text":"","category":"section"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"Install a plugin on your editor to use EditorConfig. This will ensure that your editor is configured with important formatting settings.","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"We use https://pre-commit.com to run the linters and formatters. In particular, the Julia code is formatted using JuliaFormatter.jl, so please install it globally first:","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"julia> # Press ]\npkg> activate\npkg> add JuliaFormatter","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"To install pre-commit, we recommend using pipx as follows:","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"# Install pipx following the link\npipx install pre-commit","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"With pre-commit installed, activate it as a pre-commit hook:","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"pre-commit install","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"To run the linting and formatting manually, enter the command below:","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"pre-commit run -a","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"Now, you can only commit if all the pre-commit tests pass.","category":"page"},{"location":"91-developer/#Testing","page":"Developer documentation","title":"Testing","text":"","category":"section"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"As with most Julia packages, you can just open Julia in the repository folder, activate the environment, and run test:","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"julia> # press ]\npkg> activate .\npkg> test","category":"page"},{"location":"91-developer/#Working-on-a-new-issue","page":"Developer documentation","title":"Working on a new issue","text":"","category":"section"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"We try to keep a linear history in this repo, so it is important to keep your branches up-to-date.","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"Fetch from the remote and fast-forward your local main\ngit fetch upstream\ngit switch main\ngit merge --ff-only upstream/main\nBranch from main to address the issue (see below for naming)\ngit switch -c 42-add-answer-universe\nPush the new local branch to your personal remote repository\ngit push -u origin 42-add-answer-universe\nCreate a pull request to merge your remote branch into the org main.","category":"page"},{"location":"91-developer/#Branch-naming","page":"Developer documentation","title":"Branch naming","text":"","category":"section"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"If there is an associated issue, add the issue number.\nIf there is no associated issue, and the changes are small, add a prefix such as \"typo\", \"hotfix\", \"small-refactor\", according to the type of update.\nIf the changes are not small and there is no associated issue, then create the issue first, so we can properly discuss the changes.\nUse dash separated imperative wording related to the issue (e.g., 14-add-tests, 15-fix-model, 16-remove-obsolete-files).","category":"page"},{"location":"91-developer/#Commit-message","page":"Developer documentation","title":"Commit message","text":"","category":"section"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"Use imperative or present tense, for instance: Add feature or Fix bug.\nHave informative titles.\nWhen necessary, add a body with details.\nIf there are breaking changes, add the information to the commit message.","category":"page"},{"location":"91-developer/#Before-creating-a-pull-request","page":"Developer documentation","title":"Before creating a pull request","text":"","category":"section"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"tip: Atomic git commits\nTry to create \"atomic git commits\" (recommended reading: The Utopic Git History).","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"Make sure the tests pass.\nMake sure the pre-commit tests pass.\nFetch any main updates from upstream and rebase your branch, if necessary:\ngit fetch upstream\ngit rebase upstream/main BRANCH_NAME\nThen you can open a pull request and work with the reviewer to address any issues.","category":"page"},{"location":"91-developer/#Building-and-viewing-the-documentation-locally","page":"Developer documentation","title":"Building and viewing the documentation locally","text":"","category":"section"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"Following the latest suggestions, we recommend using LiveServer to build the documentation. Here is how you do it:","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"Run julia --project=docs to open Julia in the environment of the docs.\nIf this is the first time building the docs\nPress ] to enter pkg mode\nRun pkg> dev . to use the development version of your package\nPress backspace to leave pkg mode\nRun julia> using LiveServer\nRun julia> servedocs()","category":"page"},{"location":"91-developer/#Making-a-new-release","page":"Developer documentation","title":"Making a new release","text":"","category":"section"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"To create a new release, you can follow these simple steps:","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"Create a branch release-x.y.z\nUpdate version in Project.toml\nUpdate the CHANGELOG.md:\nRename the section \"Unreleased\" to \"[x.y.z] - yyyy-mm-dd\" (i.e., version under brackets, dash, and date in ISO format)\nAdd a new section on top of it named \"Unreleased\"\nAdd a new link in the bottom for version \"x.y.z\"\nChange the \"[unreleased]\" link to use the latest version - end of line, vx.y.z ... HEAD.\nCreate a commit \"Release vx.y.z\", push, create a PR, wait for it to pass, merge the PR.\nGo back to main screen and click on the latest commit (link: https://github.com/appleparan/SPlit.jl/commit/main)\nAt the bottom, write @JuliaRegistrator register","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"After that, you only need to wait and verify:","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"Wait for the bot to comment (should take < 1m) with a link to a RP to the registry\nFollow the link and wait for a comment on the auto-merge\nThe comment should said all is well and auto-merge should occur shortly\nAfter the merge happens, TagBot will trigger and create a new GitHub tag. Check on https://github.com/appleparan/SPlit.jl/releases\nAfter the release is create, a \"docs\" GitHub action will start for the tag.\nAfter it passes, a deploy action will run.\nAfter that runs, the stable docs should be updated. Check them and look for the version number.","category":"page"},{"location":"95-reference/#reference","page":"Reference","title":"Reference","text":"","category":"section"},{"location":"95-reference/#Contents","page":"Reference","title":"Contents","text":"","category":"section"},{"location":"95-reference/","page":"Reference","title":"Reference","text":"Pages = [\"95-reference.md\"]","category":"page"},{"location":"95-reference/#Index","page":"Reference","title":"Index","text":"","category":"section"},{"location":"95-reference/","page":"Reference","title":"Reference","text":"Pages = [\"95-reference.md\"]","category":"page"},{"location":"95-reference/#SPlit.EnergyDistance","page":"Reference","title":"SPlit.EnergyDistance","text":"EnergyDistance(metric::T)\n\nCreate an Energy distance with metric metric.\n\nd(P Q) = 2 mathbbE_X Y sim P Q d(X Y) - mathbbE_X X sim P d(X X) - mathbbE_Y Y sim Q d(Y Y)\n\nArguments\n\nmetric::T: A metric for distance calculation. It must be a subtype of PreMetric.\n\nExample:\n\njulia> dist = EnergyDistance(Euclidean())\n\n\n\n\n\n","category":"type"},{"location":"95-reference/#SPlit.SplitComparison","page":"Reference","title":"SPlit.SplitComparison","text":"SplitComparison\n\nContainer for comparing multiple splitting methods.\n\n\n\n\n\n","category":"type"},{"location":"95-reference/#SPlit.SplitResult","page":"Reference","title":"SPlit.SplitResult","text":"SplitResult{T} <: SplittingResult\n\nResult of a data splitting operation.\n\nFields\n\ntrain_indices::Vector{Int}: Indices of training data\ntest_indices::Vector{Int}: Indices of test data\nquality::Union{Float64,Nothing}: Split quality metric (if computed)\nconvergence::Bool: Whether optimization converged\niterations::Int: Number of iterations used\nmethod::SplittingMethod: Method used for splitting\n\n\n\n\n\n","category":"type"},{"location":"95-reference/#SPlit.SupportPointSplitter","page":"Reference","title":"SPlit.SupportPointSplitter","text":"SupportPointSplitter{M<:PreMetric} <: SplittingMethod\n\nA splitting method based on support points optimization.\n\nFields\n\nmetric::M: Distance metric for optimization and subsampling\nratio::Float64: Split ratio (0 < ratio < 1)\nmax_iterations::Int: Maximum optimization iterations\ntolerance::Float64: Convergence tolerance\nn_threads::Int: Number of threads for parallel computation\nkappa::Union{Nothing,Int}: Subsample size for stochastic optimization\nrng::AbstractRNG: Random number generator for reproducibility\n\n\n\n\n\n","category":"type"},{"location":"95-reference/#Base.getindex-Tuple{AbstractArray, SplitResult, Symbol}","page":"Reference","title":"Base.getindex","text":"getindex(data, result::SplitResult, subset::Symbol) -> SubArray\n\nExtract training or test data using split result.\n\nExamples\n\nresult = split(splitter, data)\ntrain_data = data[result, :train]\ntest_data = data[result, :test]\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#Base.summary-Tuple{SplitComparison}","page":"Reference","title":"Base.summary","text":"summary(comparison::SplitComparison) -> DataFrame\n\nGenerate a summary table of splitting method comparison.\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#SPlit.DefaultSplitters","page":"Reference","title":"SPlit.DefaultSplitters","text":"DefaultSplitters(ratio::Float64=0.2) -> Vector{SupportPointSplitter}\n\nCreate a set of default splitting methods for comparison.\n\n\n\n\n\n","category":"function"},{"location":"95-reference/#SPlit.best-Tuple{SplitComparison}","page":"Reference","title":"SPlit.best","text":"best(comparison::SplitComparison; by::Symbol=:Quality) -> Tuple{SplittingMethod, SplitResult}\n\nFind the best splitting method from comparison.\n\nArguments\n\ncomparison: SplitComparison object\nby: Criterion for selection (:Quality, :TrainSize, :TestSize)\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#SPlit.compare-Tuple{Vector{<:SplittingMethod}, Any}","page":"Reference","title":"SPlit.compare","text":"compare(methods::Vector{<:SplittingMethod}, data; quality::Bool=true) -> SplitComparison\n\nCompare multiple splitting methods on the same dataset.\n\nArguments\n\nmethods: Vector of splitting methods to compare\ndata: Dataset to split\nquality: Whether to compute quality metrics\n\nReturns\n\nSplitComparison object with results and analysis\n\nExamples\n\nmethods = [\n    SupportPointSplitter(Euclidean(); ratio=0.2),\n    SupportPointSplitter(Cityblock(); ratio=0.2),\n    SupportPointSplitter(EnergyDistance(Euclidean()); ratio=0.2)\n]\n\ncomparison = compare(methods, data)\nsummary(comparison)\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#SPlit.compare_split_methods-Tuple{Any}","page":"Reference","title":"SPlit.compare_split_methods","text":"compare_split_methods(data; split_ratio::Float64=0.2, methods::Vector{PreMetric}=PreMetric[])\n\nCompare different distance metrics for data splitting and return quality metrics.\n\nArguments\n\ndata: Input dataset\nsplit_ratio: Split ratio for comparison\nmethods: Vector of distance metrics to compare\n\nReturns\n\nDictionary with method names as keys and quality scores as values\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#SPlit.compute_bounds-Tuple{Matrix{Float64}}","page":"Reference","title":"SPlit.compute_bounds","text":"compute_bounds(data::Matrix{Float64})\n\nCompute min/max bounds for each dimension of the data.\n\nArguments\n\ndata: Input data matrix\n\nReturns\n\nMatrix with bounds (p×2) where p is number of dimensions\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#SPlit.compute_pairwise_distances-Tuple{Any, AbstractMatrix, AbstractMatrix}","page":"Reference","title":"SPlit.compute_pairwise_distances","text":"compute_pairwise_distances(metric, X, Y)\n\nCompute pairwise distances between vectors in X and Y using StatsBase.pairwise.\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#SPlit.compute_pairwise_distances-Tuple{Any, AbstractMatrix}","page":"Reference","title":"SPlit.compute_pairwise_distances","text":"compute_pairwise_distances(metric, X)\n\nCompute pairwise distances within vectors in X using StatsBase.pairwise.\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#SPlit.compute_support_points-Tuple{Int64, Int64, Matrix{Float64}, Int64}","page":"Reference","title":"SPlit.compute_support_points","text":"compute_support_points(n::Int, p::Int, data::Matrix{Float64},\n                      subsample_size::Int; max_iterations::Int=500,\n                      tolerance::Float64=1e-10, n_threads::Int=Threads.nthreads(),\n                      weights::Vector{Float64}=ones(length(axes(data, 1))),\n                      use_stochastic::Bool=false, metric::PreMetric=Euclidean())\n\nCompute support points for optimal data representation using iterative optimization.\n\nArguments\n\nn: Number of support points to compute\np: Number of dimensions\ndata: Input data matrix\nsubsample_size: Size of subsample for stochastic optimization\nmax_iterations: Maximum number of iterations\ntolerance: Convergence tolerance\nn_threads: Number of threads for parallel computation\nweights: Weights for data points\nuse_stochastic: Whether to use stochastic optimization\nmetric: Distance metric to use (default: Euclidean())\n\nReturns\n\nMatrix of computed support points (n×p)\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#SPlit.count_encoded_columns-Tuple{Any}","page":"Reference","title":"SPlit.count_encoded_columns","text":"count_encoded_columns(data)\n\nCount total number of columns after categorical encoding.\n\nArguments\n\ndata: Input data (Matrix or DataFrame)\n\nReturns\n\nNumber of columns after encoding\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#SPlit.datasplit","page":"Reference","title":"SPlit.datasplit","text":"datasplit(method::SplittingMethod, data) -> SplitResult\n\nAlias for split to avoid naming conflict with Base.split.\n\n\n\n\n\n","category":"function"},{"location":"95-reference/#SPlit.encode_categorical!-Tuple{Matrix{Float64}, AbstractVector, Int64, AbstractVector}","page":"Reference","title":"SPlit.encode_categorical!","text":"encode_categorical!(result_matrix::Matrix{Float64}, data_col::AbstractVector,\n                   col_idx::Int, levels::Vector)\n\nEncode a categorical column using Helmert contrasts and add to result matrix.\n\nArguments\n\nresult_matrix: Matrix to store encoded values\ndata_col: Categorical data column\ncol_idx: Starting column index in result matrix\nlevels: Unique levels of the categorical variable\n\nReturns\n\nNumber of columns added to the result matrix\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#SPlit.energy_distance-Tuple{AbstractMatrix, AbstractMatrix}","page":"Reference","title":"SPlit.energy_distance","text":"energy_distance(X::AbstractMatrix, Y::AbstractMatrix; metric=Euclidean())\n\nCompute energy distance between two samples X and Y.\n\nArguments\n\nX: First sample as a matrix (each row is an observation)\nY: Second sample as a matrix (each row is an observation)\nmetric: Distance metric to use (default: Euclidean())\n\nReturns\n\nEnergy distance between the two samples\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#SPlit.energy_distance-Tuple{AbstractVector, AbstractVector}","page":"Reference","title":"SPlit.energy_distance","text":"energy_distance(X::AbstractVector, Y::AbstractVector; metric=Euclidean())\n\nCompute energy distance between two 1D samples X and Y.\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#SPlit.evaluate_split_quality-Tuple{Matrix{Float64}, Vector{Int64}, Vector{Int64}}","page":"Reference","title":"SPlit.evaluate_split_quality","text":"evaluate_split_quality(data::Matrix{Float64}, train_indices::Vector{Int},\n                      test_indices::Vector{Int}; metric::PreMetric=Euclidean())\n\nEvaluate the quality of a data split using energy distance between train and test sets. A smaller energy distance indicates more similar distributions (better split quality).\n\nArguments\n\ndata: Original data matrix\ntrain_indices: Indices of training set\ntest_indices: Indices of test set\nmetric: Distance metric to use for energy distance calculation\n\nReturns\n\nEnergy distance between train and test distributions\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#SPlit.find_nearest_neighbors-Tuple{Matrix{Float64}, Matrix{Float64}}","page":"Reference","title":"SPlit.find_nearest_neighbors","text":"find_nearest_neighbors(data::Matrix{Float64}, support_points::Matrix{Float64};\n                       metric::PreMetric=Euclidean())\n\nFind the nearest support point for each data point using specified distance metric.\n\nArguments\n\ndata: Data matrix (n×p)\nsupport_points: Support points matrix (k×p)\nmetric: Distance metric to use (default: Euclidean())\n\nReturns\n\nVector of indices indicating which support point each data point is closest to\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#SPlit.format_data-Tuple{Any}","page":"Reference","title":"SPlit.format_data","text":"format_data(data)\n\nFormat and preprocess data for SPlit algorithm.\n\nThis function:\n\nHandles missing values (throws error if found)\nConverts categorical variables to Helmert contrasts\nRemoves constant columns\nStandardizes all columns to have mean 0 and variance 1\n\nArguments\n\ndata: Input dataset (Matrix or DataFrame)\n\nReturns\n\nPreprocessed matrix with standardized columns\n\nThrows\n\nArgumentError: If dataset contains missing values\nArgumentError: If dataset contains non-numeric non-categorical columns\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#SPlit.helmert_contrasts-Union{Tuple{Vector{T}}, Tuple{T}} where T","page":"Reference","title":"SPlit.helmert_contrasts","text":"helmert_contrasts(levels::Vector{T}) where T\n\nGenerate Helmert contrast matrix for categorical variables using StatsModels.\n\nArguments\n\nlevels: Vector of unique levels for the categorical variable\n\nReturns\n\nMatrix of Helmert contrasts with size (nlevels, nlevels-1)\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#SPlit.initialize_support_points-Tuple{Int64, Int64, Matrix{Float64}, Matrix{Float64}}","page":"Reference","title":"SPlit.initialize_support_points","text":"initialize_support_points(n::Int, p::Int, data::Matrix{Float64}, bounds::Matrix{Float64})\n\nInitialize support points by sampling from data with jitter.\n\nArguments\n\nn: Number of support points to generate\np: Number of dimensions\ndata: Data matrix to sample from\nbounds: Bounds for each dimension\n\nReturns\n\nMatrix of initialized support points (n×p)\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#SPlit.jitter_data!-Tuple{Matrix{Float64}, Matrix{Float64}}","page":"Reference","title":"SPlit.jitter_data!","text":"jitter_data!(data::Matrix{Float64}, bounds::Matrix{Float64})\n\nAdd small random noise to data to handle duplicates, ensuring values stay within bounds.\n\nArguments\n\ndata: Data matrix to jitter (modified in-place)\nbounds: Bounds matrix with min/max for each dimension\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#SPlit.metric-Tuple{SupportPointSplitter}","page":"Reference","title":"SPlit.metric","text":"metric(method::SplittingMethod) -> PreMetric\n\nGet the distance metric from a splitting method.\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#SPlit.optimal_split_ratio-Tuple{Any, Any}","page":"Reference","title":"SPlit.optimal_split_ratio","text":"optimal_split_ratio(x, y; method::String=\"simple\", degree::Int=2)\n\nFind the optimal splitting ratio by estimating the number of model parameters.\n\nArguments\n\nx: Input matrix or vector\ny: Response variable\nmethod: \"simple\" (uses √n rule) or \"regression\" (stepwise regression)\ndegree: Polynomial degree for regression method\n\nReturns\n\nOptimal split ratio for testing set\n\nExamples\n\nusing Random\n\nRandom.seed!(123)\nX = randn(100, 3)\nY = X[:, 1] + X[:, 2]^2 + 0.1 * randn(100)\noptimal_ratio = optimal_split_ratio(X, Y)\n\nReferences\n\nJoseph, V. R. (2022). Optimal Ratio for Data Splitting. Statistical Analysis & Data Mining: The ASA Data Science Journal, 15(4), 537-546.\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#SPlit.quality-Tuple{SplitResult}","page":"Reference","title":"SPlit.quality","text":"quality(result::SplittingResult) -> Union{Float64,Nothing}\n\nGet the quality metric from split result.\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#SPlit.quick_compare-Tuple{Any}","page":"Reference","title":"SPlit.quick_compare","text":"quick_compare(data; ratio::Float64=0.2, max_iterations::Int=50) -> SplitComparison\n\nQuick comparison using default methods with reduced iterations for speed.\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#SPlit.ratio-Tuple{SupportPointSplitter}","page":"Reference","title":"SPlit.ratio","text":"ratio(method::SplittingMethod) -> Float64\n\nGet the split ratio from a splitting method.\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#SPlit.sample_without_replacement-Tuple{AbstractVector, Int64}","page":"Reference","title":"SPlit.sample_without_replacement","text":"sample_without_replacement(X, n)\n\nSample n elements from X without replacement.\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#SPlit.split","page":"Reference","title":"SPlit.split","text":"split(method::SplittingMethod, data) -> SplitResult\n\nSplit data using the specified method.\n\nExamples\n\n# Basic usage\nsplitter = SupportPointSplitter(Euclidean(); ratio=0.2)\nresult = SPlit.split(splitter, data)  # Use qualified name to avoid Base.split conflict\ntrain_idx, test_idx = result  # Iterator interface\n\n# With different metrics\nenergy_splitter = SupportPointSplitter(EnergyDistance(Euclidean()))\nresult = SPlit.split(energy_splitter, data)\n\n# Access results\nprintln(\"Training size: \", length(train_indices(result)))\nprintln(\"Test size: \", length(test_indices(result)))\n\n\n\n\n\n","category":"function"},{"location":"95-reference/#SPlit.split-Tuple{SupportPointSplitter, AbstractMatrix}","page":"Reference","title":"SPlit.split","text":"split(method::SupportPointSplitter, data::AbstractMatrix) -> SplitResult\n\nSplit matrix data where each row is an observation.\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#SPlit.split-Tuple{SupportPointSplitter, AbstractVector}","page":"Reference","title":"SPlit.split","text":"split(method::SupportPointSplitter, data::AbstractVector) -> SplitResult\n\nSplit 1D vector data.\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#SPlit.split-Tuple{SupportPointSplitter, DataFrames.DataFrame}","page":"Reference","title":"SPlit.split","text":"split(method::SupportPointSplitter, data::DataFrame) -> SplitResult\n\nSplit DataFrame with automatic categorical encoding.\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#SPlit.split-Tuple{Vector{<:SplittingMethod}, Any}","page":"Reference","title":"SPlit.split","text":"split(methods::Vector{<:SplittingMethod}, data) -> Vector{SplitResult}\n\nApply multiple splitting methods to the same data.\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#SPlit.split_data-Tuple{Any}","page":"Reference","title":"SPlit.split_data","text":"split_data(data; split_ratio::Float64=0.2, kappa::Union{Nothing,Int}=nothing,\n           max_iterations::Int=500, tolerance::Float64=1e-10,\n           n_threads::Int=Threads.nthreads(), metric::PreMetric=Euclidean())\n\nSplit a dataset optimally for training and testing using the support points method.\n\nThis is the main function of SPlit.jl, equivalent to the SPlit() function in the R package.\n\nArguments\n\ndata: Input dataset (Matrix or DataFrame)\nsplit_ratio: Ratio for the smaller subset (default: 0.2 for 80-20 split)\nkappa: Subsample size for stochastic optimization (default: use all data)\nmax_iterations: Maximum iterations for support points optimization\ntolerance: Convergence tolerance for optimization\nn_threads: Number of threads for parallel computation\nmetric: Distance metric to use (default: Euclidean(), can use EnergyDistance())\n\nReturns\n\nVector of indices for the smaller subset\n\nExamples\n\nusing SPlit\nusing Random\nusing Distances\n\n# Generate sample data\nRandom.seed!(123)\nn = 100\nX = randn(n, 2)\nY = X[:, 1] .+ X[:, 2].^2 .+ 0.1 * randn(n)\ndata = hcat(X, Y)\n\n# Split data with default Euclidean distance\ntest_indices = split_data(data)\ntrain_data = data[setdiff(1:n, test_indices), :]\ntest_data = data[test_indices, :]\n\n# Use Energy Distance for splitting (better for complex distributions)\nusing SPlit: EnergyDistance\ntest_indices_energy = split_data(data; metric=EnergyDistance(Euclidean()))\n\n# Use Manhattan distance\ntest_indices_manhattan = split_data(data; metric=Cityblock())\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#SPlit.split_data_r-Tuple{Any}","page":"Reference","title":"SPlit.split_data_r","text":"split_data_r(data; splitRatio::Float64=0.2, kappa::Union{Nothing,Int}=nothing,\n             maxIterations::Int=500, tolerance::Float64=1e-10,\n             nThreads::Int=Threads.nthreads(), metric::PreMetric=Euclidean())\n\nAlias for split_data with R-style parameter naming for compatibility.\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#SPlit.split_data_with_quality-Tuple{Any}","page":"Reference","title":"SPlit.split_data_with_quality","text":"split_data_with_quality(data; split_ratio::Float64=0.2, metric::PreMetric=Euclidean(), kwargs...)\n\nSplit data and return both indices and quality assessment.\n\nReturns\n\n(testindices, qualityscore)\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#SPlit.split_with_quality-Tuple{SplittingMethod, Any}","page":"Reference","title":"SPlit.split_with_quality","text":"split_with_quality(method::SplittingMethod, data) -> SplitResult\n\nSplit data and compute quality metric.\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#SPlit.subsample_by_support_points-Tuple{Matrix{Float64}, Matrix{Float64}}","page":"Reference","title":"SPlit.subsample_by_support_points","text":"subsample_by_support_points(data::Matrix{Float64}, support_points::Matrix{Float64};\n                           metric::PreMetric=Euclidean())\n\nPerform subsampling by finding the nearest data point to each support point. This implements a greedy approach where each support point \"claims\" its nearest data point, with removal to ensure no data point is selected twice.\n\nArguments\n\ndata: Data matrix (n×p)\nsupport_points: Support points matrix (k×p)\nmetric: Distance metric to use (default: Euclidean())\n\nReturns\n\nVector of indices of the selected data points (length k)\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#SPlit.subsample_indices-Tuple{Matrix{Float64}, Matrix{Float64}}","page":"Reference","title":"SPlit.subsample_indices","text":"subsample_indices(data::Matrix{Float64}, support_points::Matrix{Float64};\n                 metric::PreMetric=Euclidean())\n\nMain subsampling function that returns indices of data points corresponding to support points. This is the Julia equivalent of the subsample function from the R package.\n\nArguments\n\ndata: Data matrix (n×p)\nsupport_points: Support points matrix (k×p) where k ≤ n\nmetric: Distance metric to use (default: Euclidean())\n\nReturns\n\nVector of indices of the subsampled data points\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#SPlit.test_indices-Tuple{SplitResult}","page":"Reference","title":"SPlit.test_indices","text":"test_indices(result::SplittingResult) -> Vector{Int}\n\nExtract test indices from split result.\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#SPlit.train_indices-Tuple{SplitResult}","page":"Reference","title":"SPlit.train_indices","text":"train_indices(result::SplittingResult) -> Vector{Int}\n\nExtract training indices from split result.\n\n\n\n\n\n","category":"method"},{"location":"90-contributing/#contributing","page":"Contributing guidelines","title":"Contributing guidelines","text":"","category":"section"},{"location":"90-contributing/","page":"Contributing guidelines","title":"Contributing guidelines","text":"First of all, thanks for the interest!","category":"page"},{"location":"90-contributing/","page":"Contributing guidelines","title":"Contributing guidelines","text":"We welcome all kinds of contribution, including, but not limited to code, documentation, examples, configuration, issue creating, etc.","category":"page"},{"location":"90-contributing/","page":"Contributing guidelines","title":"Contributing guidelines","text":"Be polite and respectful, and follow the code of conduct.","category":"page"},{"location":"90-contributing/#Bug-reports-and-discussions","page":"Contributing guidelines","title":"Bug reports and discussions","text":"","category":"section"},{"location":"90-contributing/","page":"Contributing guidelines","title":"Contributing guidelines","text":"If you think you found a bug, feel free to open an issue. Focused suggestions and requests can also be opened as issues. Before opening a pull request, start an issue or a discussion on the topic, please.","category":"page"},{"location":"90-contributing/#Working-on-an-issue","page":"Contributing guidelines","title":"Working on an issue","text":"","category":"section"},{"location":"90-contributing/","page":"Contributing guidelines","title":"Contributing guidelines","text":"If you found an issue that interests you, comment on that issue what your plans are. If the solution to the issue is clear, you can immediately create a pull request (see below). Otherwise, say what your proposed solution is and wait for a discussion around it.","category":"page"},{"location":"90-contributing/","page":"Contributing guidelines","title":"Contributing guidelines","text":"tip: Tip\nFeel free to ping us after a few days if there are no responses.","category":"page"},{"location":"90-contributing/","page":"Contributing guidelines","title":"Contributing guidelines","text":"If your solution involves code (or something that requires running the package locally), check the developer documentation. Otherwise, you can use the GitHub interface directly to create your pull request.","category":"page"},{"location":"#SPlit.jl","page":"SPlit.jl","title":"SPlit.jl","text":"","category":"section"},{"location":"","page":"SPlit.jl","title":"SPlit.jl","text":"Julia-native implementation of optimal data splitting using support points, based on Joseph and Vakayil (2021).","category":"page"},{"location":"","page":"SPlit.jl","title":"SPlit.jl","text":"✨ Now featuring a modern Julia API with type safety, multiple dispatch, and energy distance support!","category":"page"},{"location":"#Overview","page":"SPlit.jl","title":"Overview","text":"","category":"section"},{"location":"","page":"SPlit.jl","title":"SPlit.jl","text":"SPlit provides an optimal method for splitting datasets into training and testing sets based on the method of support points. Unlike traditional random splitting, SPlit ensures that both subsets are representative of the original data distribution, leading to more reliable model evaluation and better generalization performance.","category":"page"},{"location":"#Key-Features","page":"SPlit.jl","title":"Key Features","text":"","category":"section"},{"location":"#**Modern-Julia-API**","page":"SPlit.jl","title":"🚀 Modern Julia API","text":"","category":"section"},{"location":"","page":"SPlit.jl","title":"SPlit.jl","text":"Type-safe splitting: Parameterized types with compile-time dispatch\nMultiple dispatch: Specialized methods for Matrix, DataFrame, Vector inputs\nComposable design: Iterator and indexing protocols for seamless integration","category":"page"},{"location":"#**Advanced-Distance-Metrics**","page":"SPlit.jl","title":"🎯 Advanced Distance Metrics","text":"","category":"section"},{"location":"","page":"SPlit.jl","title":"SPlit.jl","text":"Energy distance: Superior splits for complex data distributions\nFlexible metrics: Support for any Distances.jl metric (Euclidean, Manhattan, etc.)\nQuality assessment: Built-in split quality evaluation and comparison","category":"page"},{"location":"#**Robust-Implementation**","page":"SPlit.jl","title":"💪 Robust Implementation","text":"","category":"section"},{"location":"","page":"SPlit.jl","title":"SPlit.jl","text":"Model-independent: Works with both regression and classification problems\nCategorical support: Automatic Helmert contrast encoding\nPerformance optimized: Multi-threaded with stochastic optimization for large data\nBackward compatible: Full R-style API preserved for migration","category":"page"},{"location":"#Quick-Start","page":"SPlit.jl","title":"Quick Start","text":"","category":"section"},{"location":"#Modern-Julia-API-(Recommended)","page":"SPlit.jl","title":"Modern Julia API (Recommended)","text":"","category":"section"},{"location":"","page":"SPlit.jl","title":"SPlit.jl","text":"using SPlit, Distances\nusing Random\n\n# Generate sample data\nRandom.seed!(123)\ndata = randn(100, 3)\n\n# Create a splitter with energy distance for better complex data handling\nsplitter = SupportPointSplitter(EnergyDistance(Euclidean()); ratio=0.2)\n\n# Split the data\nresult = datasplit(splitter, data)\n\n# Access train/test data using intuitive indexing\ntrain_data = data[result, :train]\ntest_data = data[result, :test]\n\n# Or use iterator interface\ntrain_indices, test_indices = result\n\nprintln(\"Training: $(size(train_data))\")\nprintln(\"Test: $(size(test_data))\")","category":"page"},{"location":"#Legacy-API-(For-R-users)","page":"SPlit.jl","title":"Legacy API (For R users)","text":"","category":"section"},{"location":"","page":"SPlit.jl","title":"SPlit.jl","text":"using SPlit\n\n# Traditional function-style API (still fully supported)\ntest_indices = split_data(data; split_ratio=0.2)\ntrain_data = data[setdiff(1:size(data,1), test_indices), :]\ntest_data = data[test_indices, :]","category":"page"},{"location":"#API-Reference","page":"SPlit.jl","title":"API Reference","text":"","category":"section"},{"location":"","page":"SPlit.jl","title":"SPlit.jl","text":"See the Reference section for complete API documentation.","category":"page"},{"location":"#Examples","page":"SPlit.jl","title":"Examples","text":"","category":"section"},{"location":"#Method-Comparison-and-Quality-Assessment","page":"SPlit.jl","title":"Method Comparison & Quality Assessment","text":"","category":"section"},{"location":"","page":"SPlit.jl","title":"SPlit.jl","text":"using SPlit, DataFrames, CategoricalArrays\n\n# Mixed-type dataset\ndf = DataFrame(\n    x1 = randn(150),\n    x2 = randn(150),\n    category = categorical(rand([\"A\", \"B\", \"C\"], 150)),\n    target = randn(150)\n)\n\n# Compare different distance metrics\nmethods = [\n    SupportPointSplitter(Euclidean(); ratio=0.2),\n    SupportPointSplitter(Cityblock(); ratio=0.2),\n    SupportPointSplitter(EnergyDistance(Euclidean()); ratio=0.2)\n]\n\ncomparison = compare(methods, df; quality=true)\nprintln(summary(comparison))\n\n# Select best method by quality\nbest_method, best_result = best(comparison; by=:Quality)\ntrain_df = df[best_result, :train]\ntest_df = df[best_result, :test]","category":"page"},{"location":"#Algorithm-Details","page":"SPlit.jl","title":"Algorithm Details","text":"","category":"section"},{"location":"","page":"SPlit.jl","title":"SPlit.jl","text":"SPlit uses the method of support points to create optimal data splits:","category":"page"},{"location":"","page":"SPlit.jl","title":"SPlit.jl","text":"Data preprocessing: Categorical variables are encoded using Helmert contrasts, and all variables are standardized\nSupport points computation: Iteratively optimizes support points to minimize energy distance\nNearest neighbor assignment: Each data point is assigned to its nearest support point\nSubset selection: Returns indices of the smaller subset based on support point assignments","category":"page"},{"location":"","page":"SPlit.jl","title":"SPlit.jl","text":"For large datasets, stochastic optimization can be enabled using the kappa parameter to improve computational efficiency.","category":"page"},{"location":"#References","page":"SPlit.jl","title":"References","text":"","category":"section"},{"location":"","page":"SPlit.jl","title":"SPlit.jl","text":"Joseph, V. R., & Vakayil, A. (2021). SPlit: An Optimal Method for Data Splitting. Technometrics, 63(4), 492-502. DOI\nMak, S., & Joseph, V. R. (2018). Support points. The Annals of Statistics, 46(6A), 2562-2592.\nJoseph, V. R. (2022). Optimal Ratio for Data Splitting. Statistical Analysis and Data Mining: The ASA Data Science Journal, 15(4), 537-546.","category":"page"},{"location":"#Contributors","page":"SPlit.jl","title":"Contributors","text":"","category":"section"},{"location":"","page":"SPlit.jl","title":"SPlit.jl","text":"<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n<!-- prettier-ignore-start -->\n<!-- markdownlint-disable -->\n\n<!-- markdownlint-restore -->\n<!-- prettier-ignore-end -->\n\n<!-- ALL-CONTRIBUTORS-LIST:END -->","category":"page"}]
}
